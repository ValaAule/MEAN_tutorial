angular.module("app",["ngRoute"]),console.log("module.js: access to module successful"),angular.module("app").controller("ApplicationCtrl",["$scope",function(s){s.$on("login",function(o,e){s.currentUser=e,console.log("application.ctrl.js = login successful")})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(s,o){s.login=function(e,t){o.login(e,t).then(function(o){s.$emit("login",o),console.log("login.ctrl.js: login successful")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(s,o){s.addPost=function(){s.postBody&&o.create({username:"Add Post Button",body:s.postBody}).success(function(o){s.posts.unshift(o),s.postBody=null,console.log("posts.ctrl.js: create post successful")})},o.fetch().success(function(o){s.posts=o,console.log("posts.ctrl.js: fetch post succesful")})}]),angular.module("app").service("PostsSvc",["$http",function(s){this.fetch=function(){return console.log("posts.svc.js: fetch post successful"),s.get("/api/posts")},this.create=function(o){return console.log("posts.svc.js: create post successful"),s.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(s,o){s.register=function(e,t){o.register(e,t).then(function(o){s.$emit("login",o),console.log("register.ctrl.js: registration succesful")})}}]),angular.module("app").config(["$routeProvider",function(s){s.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}),console.log("routes.js: routing succesful")}]),angular.module("app").service("UserSvc",["$http",function(s){var o=this;o.getUser=function(){return s.get("/api/users").then(function(s){return console.log("user.svc.js: get user successful"),s.data})},o.login=function(e,t){return s.post("/api/sessions",{username:e,password:t}).then(function(e){return o.token=e.data,s.defaults.headers.common["X-Auth"]=e.data,console.log("user.svc.js: login successful"),o.getUser()})},o.register=function(e,t){return console.log("user.svc.js: user registration successful"),s.post("/api/users",{username:e,password:t}).then(function(){return o.login(e,t)})}}]);
//# sourceMappingURL=data:application/json;base64,