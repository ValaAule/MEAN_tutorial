angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(e,o){n.login(e,o).then(function(n){t.$emit("login",n)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"Add Post Button",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,n){t.register=function(e,o){n.register(e,o).then(function(n){t.$emit("login",n)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},n.login=function(e,o){return t.post("/api/sessions",{username:e,password:o}).then(function(e){return n.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,n.getUser()})},n.register=function(e,o){return t.post("/api/users",{username:e,password:o}).then(function(){return n.login(e,o)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsIiRlbWl0IiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInJlc3BvbnNlIiwiZGF0YSIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFHQUEsUUFBUUMsT0FBTyxPQUNYLFlDQUpELFFBQVFDLE9BQU8sT0FDZEMsV0FBVyxtQkFBQSxTQUFtQixTQUFTQyxHQUNoQ0EsRUFBT0MsSUFBSSxRQUFTLFNBQVNDLEVBQUdDLEdBQzVCSCxFQUFPSSxZQUFjRCxPQ0ZqQ04sUUFBUUMsT0FBTyxPQUNkQyxXQUFXLGFBQUEsU0FBQSxVQUFhLFNBQVVDLEVBQVFLLEdBQ25DTCxFQUFPTSxNQUFRLFNBQVVDLEVBQVVDLEdBQy9CSCxFQUFRQyxNQUFNQyxFQUFVQyxHQUNmQyxLQUFLLFNBQVVOLEdBQ2hCSCxFQUFPVSxNQUFNLFFBQVNQLFNDSjFDTixRQUFRQyxPQUFPLE9BQ2RDLFdBQVcsYUFBQSxTQUFBLFdBQVksU0FBVUMsRUFBUVcsR0FDdENYLEVBQU9ZLFFBQVUsV0FDVFosRUFBT2EsVUFDUEYsRUFBU0csUUFDTFAsU0FBVSxrQkFDVlEsS0FBTWYsRUFBT2EsV0FDZEcsUUFBUSxTQUFVQyxHQUNqQmpCLEVBQU9rQixNQUFNQyxRQUFRRixHQUNyQmpCLEVBQU9hLFNBQVcsUUFLOUJGLEVBQVNTLFFBQ0pKLFFBQVEsU0FBVUUsR0FDZmxCLEVBQU9rQixNQUFRQSxPQ3RCM0JyQixRQUFRQyxPQUFPLE9BQ2R1QixRQUFRLFlBQUEsUUFBWSxTQUFVQyxHQUMzQkMsS0FBS0gsTUFBUSxXQUNULE1BQU9FLEdBQU1FLElBQUksZUFFckJELEtBQUtULE9BQVMsU0FBVUcsR0FDcEIsTUFBT0ssR0FBTUwsS0FBSyxhQUFjQSxPQ0R4Q3BCLFFBQVFDLE9BQU8sT0FDZEMsV0FBVyxnQkFBQSxTQUFBLFVBQWdCLFNBQVVDLEVBQVFLLEdBQ3RDTCxFQUFPeUIsU0FBVyxTQUFVbEIsRUFBVUMsR0FDbENILEVBQVFvQixTQUFTbEIsRUFBVUMsR0FDbEJDLEtBQUssU0FBVU4sR0FDaEJILEVBQU9VLE1BQU0sUUFBU1AsU0NMMUNOLFFBQVFDLE9BQU8sT0FDZDRCLFFBQUEsaUJBQU8sU0FBVUMsR0FDVkEsRUFDS0MsS0FBSyxLQUFNN0IsV0FBWSxZQUFhOEIsWUFBYSxlQUNqREQsS0FBSyxhQUFjN0IsV0FBWSxlQUFnQjhCLFlBQWEsa0JBQzVERCxLQUFLLFVBQVc3QixXQUFZLFlBQWE4QixZQUFhLGtCQ05uRWhDLFFBQVFDLE9BQU8sT0FDZHVCLFFBQVEsV0FBQSxRQUFXLFNBQVNDLEdBQ3JCLEdBQUlRLEdBQU1QLElBQ1ZPLEdBQUlDLFFBQVUsV0FDbEIsTUFBT1QsR0FBTUUsSUFBSSxjQUNoQmYsS0FBSyxTQUFVdUIsR0FDZCxNQUFPQSxHQUFTQyxRQUdkSCxFQUFJeEIsTUFBTSxTQUFTQyxFQUFVQyxHQUN6QixNQUFPYyxHQUFNTCxLQUFLLGlCQUNkVixTQUFVQSxFQUFVQyxTQUFVQSxJQUN2Q0MsS0FBSyxTQUFVdUIsR0FHTixNQUZWRixHQUFJSSxNQUFRRixFQUFTQyxLQUNyQlgsRUFBTWEsU0FBU0MsUUFBUUMsT0FBTyxVQUFZTCxFQUFTQyxLQUNsQ0gsRUFBSUMsYUFLekJELEVBQUlMLFNBQVcsU0FBVWxCLEVBQVVDLEdBQ2pDLE1BQU9jLEdBQU1MLEtBQUssY0FDaEJWLFNBQVVBLEVBQVVDLFNBQVVBLElBQzdCQyxLQUFLLFdBQ04sTUFBT3FCLEdBQUl4QixNQUFNQyxFQUFVQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzcvMTUuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdhcHAnLFtcbiAgICAnbmdSb3V0ZSdcbl0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi8xMi8xNS5cbiAqIFVzZWQgZm9yIGxvZ2luIHBhZ2VcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcikge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlclxuICAgICAgICB9KVxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi85LzE1LlxuICogVXNlZCBmb3IgbG9naW4gcGFnZVxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMpIHtcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgVXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1c2VyKXtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzYvMTUuXG4gKiBjcmVhdGUgdGhlIFBvc3RzQ3RybCBtb2R1bGUgYW5kIGRlcGVuZGVuY3kgaW5qZWN0ICRzY29wZSwgdGhlIHNjb3BlIHRpZXMvZ2x1ZXMgdGhlIGNvbnRyb2xsZXIgdG8gdGhlIHZpZXdcbiAqIGludGVncmF0ZSB0byB0aGUgUkVTVCBBUEkgdG8gcG9zdCBiYWNrIHRvIE1vbmdvREIuICBPbmx5IHRoZSBzdWNjZXNzIGZ1bmN0aW9uIGlzIHBvc3RlZCBhbmQgaXQgbnVsbHMgdGhlIHZhbHVlIGZvciB0aGUgbmV4dCB0aW1lXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcihcIlBvc3RzQ3RybFwiLGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU3ZjKSB7XG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xuICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ0FkZCBQb3N0IEJ1dHRvbicsXG4gICAgICAgICAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdClcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgUG9zdHNTdmMuZmV0Y2goKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzXG4gICAgICAgIH0pXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJylcbiAgICB9XG4gICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXG4gICAgfVxufSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKiBVc2VkIGZvciByZWdpc3RlciBwYWdlXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAgICAgICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVzZXIpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvOS8xNS5cbiAqIFJvdXRpbmcgZmlsZSB0aGF0IG1hcHMgdGhlIGNvbnRyb2xsZXJzIGFuZCBodG1sIGZpbGVzXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAgICAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAgICAgLndoZW4oJy8nLCB7Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuICAgICAgICAgICAgLndoZW4oJy9yZWdpc3RlcicsIHtjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ30pXG4gICAgICAgICAgICAud2hlbignL2xvZ2luJywge2NvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnfSlcbiAgICB9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvOS8xNS5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuICAgICAgICB2YXIgc3ZjID0gdGhpc1xuICAgICAgICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBzdmMubG9naW49ZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBzdmMudG9rZW4gPSByZXNwb25zZS5kYXRhXG4gICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKClcbiAgICB9KVxuICB9XG5cbiAvL3VzZWQgdG8gcmVnaXN0ZXIgbmV3IHVzZXJzIGFuZCBhdXRvbWF0aWNhbGx5IGxvZ3MgdGhlbSBpblxuICBzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgIH0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9