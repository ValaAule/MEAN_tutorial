angular.module("app",["ngRoute"]),console.log("module.js: access to module successful"),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(s,e){o.currentUser=e,console.log("application.ctrl.js = login successful")})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,s){o.login=function(e,t){s.login(e,t).then(function(s){o.$emit("login",s),console.log("login.ctrl.js: login successful")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,s){o.addPost=function(){o.postBody&&s.create({username:"Add Post Button",body:o.postBody}).success(function(){o.postBody=null,console.log("posts.ctrl.js: create post successful")})},o.$on("ws:new_post",function(s,e){o.$apply(function(){o.posts.unshift(e),console.log("posts.ctrl.js: websocket new post successful")})}),s.fetch().success(function(s){o.posts=s,console.log("posts.ctrl.js: fetch post successful")})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return console.log("posts.svc.js: fetch post successful"),o.get("/api/posts")},this.create=function(s){return console.log("posts.svc.js: create post successful"),o.post("/api/posts",s)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,s){o.register=function(e,t){s.register(e,t).then(function(s){o.$emit("login",s),console.log("register.ctrl.js: registration succesful")})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}),console.log("routes.js: routing succesful")}]),angular.module("app").service("UserSvc",["$http",function(o){var s=this;s.getUser=function(){return o.get("/api/users").then(function(o){return console.log("user.svc.js: get user successful"),o.data})},s.login=function(e,t){return o.post("/api/sessions",{username:e,password:t}).then(function(e){return s.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,console.log("user.svc.js: login successful"),s.getUser()})},s.register=function(e,t){return console.log("user.svc.js: user registration successful"),o.post("/api/users",{username:e,password:t}).then(function(){return s.login(e,t)})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,s){!function e(){var t="ws://localhost:3000",n=new WebSocket(t);n.onopen=function(){console.log("ng/websockets.js: websocket connected")},n.onclose=function(){console.log("Websocket closed. Reconnecting..."),s(e,1e4)},n.onmessage=function(s){console.log(s);var e=JSON.parse(s.data);o.$broadcast("ws:"+e.topic,e.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,