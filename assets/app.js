angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(){t.currentUser=UserSvc.getUser})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(e,o){n.login(e,o).then(function(n){t.$emit("login",n)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"Add Post Button",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,n){t.register=function(e,o){n.register(e,o).then(function(n){t.$emit("login",n)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},n.login=function(e,o){return t.post("/api/sessions",{username:e,password:o}).then(function(e){return window.localStorage.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,n.getUser()})},n.register=function(e,o){return t.post("/api/users",{username:e,password:o}).then(function(){return n.login(e,o)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsImN1cnJlbnRVc2VyIiwiVXNlclN2YyIsImdldFVzZXIiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwidXNlciIsIiRlbWl0IiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwicmVzcG9uc2UiLCJkYXRhIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iXSwibWFwcGluZ3MiOiJBQUdBQSxRQUFRQyxPQUFPLE9BQ1gsWUNBSkQsUUFBUUMsT0FBTyxPQUNkQyxXQUFXLG1CQUFBLFNBQW1CLFNBQVNDLEdBQ2hDQSxFQUFPQyxJQUFJLFFBQVMsV0FDaEJELEVBQU9FLFlBQWNDLFFBQVFDLGFDRnpDUCxRQUFRQyxPQUFPLE9BQ2RDLFdBQVcsYUFBQSxTQUFBLFVBQWEsU0FBVUMsRUFBUUcsR0FDbkNILEVBQU9LLE1BQVEsU0FBVUMsRUFBVUMsR0FDL0JKLEVBQVFFLE1BQU1DLEVBQVVDLEdBQ2ZDLEtBQUssU0FBVUMsR0FDaEJULEVBQU9VLE1BQU0sUUFBU0QsU0NKMUNaLFFBQVFDLE9BQU8sT0FDZEMsV0FBVyxhQUFBLFNBQUEsV0FBWSxTQUFVQyxFQUFRVyxHQUN0Q1gsRUFBT1ksUUFBVSxXQUNUWixFQUFPYSxVQUNQRixFQUFTRyxRQUNMUixTQUFVLGtCQUNWUyxLQUFNZixFQUFPYSxXQUNkRyxRQUFRLFNBQVVDLEdBQ2pCakIsRUFBT2tCLE1BQU1DLFFBQVFGLEdBQ3JCakIsRUFBT2EsU0FBVyxRQUs5QkYsRUFBU1MsUUFDSkosUUFBUSxTQUFVRSxHQUNmbEIsRUFBT2tCLE1BQVFBLE9DdEIzQnJCLFFBQVFDLE9BQU8sT0FDZHVCLFFBQVEsWUFBQSxRQUFZLFNBQVVDLEdBQzNCQyxLQUFLSCxNQUFRLFdBQ1QsTUFBT0UsR0FBTUUsSUFBSSxlQUVyQkQsS0FBS1QsT0FBUyxTQUFVRyxHQUNwQixNQUFPSyxHQUFNTCxLQUFLLGFBQWNBLE9DRHhDcEIsUUFBUUMsT0FBTyxPQUNkQyxXQUFXLGdCQUFBLFNBQUEsVUFBZ0IsU0FBVUMsRUFBUUcsR0FDdENILEVBQU95QixTQUFXLFNBQVVuQixFQUFVQyxHQUNsQ0osRUFBUXNCLFNBQVNuQixFQUFVQyxHQUNsQkMsS0FBSyxTQUFVQyxHQUNoQlQsRUFBT1UsTUFBTSxRQUFTRCxTQ0wxQ1osUUFBUUMsT0FBTyxPQUNkNEIsUUFBQSxpQkFBTyxTQUFVQyxHQUNWQSxFQUNLQyxLQUFLLEtBQU03QixXQUFZLFlBQWE4QixZQUFhLGVBQ2pERCxLQUFLLGFBQWM3QixXQUFZLGVBQWdCOEIsWUFBYSxrQkFDNURELEtBQUssVUFBVzdCLFdBQVksWUFBYThCLFlBQWEsa0JDTm5FaEMsUUFBUUMsT0FBTyxPQUNkdUIsUUFBUSxXQUFBLFFBQVcsU0FBU0MsR0FDekIsR0FBSVEsR0FBTVAsSUFDVk8sR0FBSTFCLFFBQVUsV0FDVixNQUFPa0IsR0FBTUUsSUFBSSxjQUNoQmhCLEtBQUssU0FBVXVCLEdBQ1osTUFBT0EsR0FBU0MsUUFJeEJGLEVBQUl6QixNQUFNLFNBQVNDLEVBQVVDLEdBQ3pCLE1BQU9lLEdBQU1MLEtBQUssaUJBQ2RYLFNBQVVBLEVBQVVDLFNBQVVBLElBQy9CQyxLQUFLLFNBQVV1QixHQUdkLE1BRkFFLFFBQU9DLGFBQWFDLE1BQVFKLEVBQVNDLEtBQ3JDVixFQUFNYyxTQUFTQyxRQUFRQyxPQUFPLFVBQVlQLEVBQVNDLEtBQzVDRixFQUFJMUIsYUFLbkIwQixFQUFJTCxTQUFXLFNBQVVuQixFQUFVQyxHQUMvQixNQUFPZSxHQUFNTCxLQUFLLGNBQ2RYLFNBQVVBLEVBQVVDLFNBQVVBLElBQy9CQyxLQUFLLFdBQ0osTUFBT3NCLEdBQUl6QixNQUFNQyxFQUFVQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzcvMTUuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdhcHAnLFtcbiAgICAnbmdSb3V0ZSdcbl0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi8xMi8xNS5cbiAqIFVzZWQgZm9yIGxvZ2luIHBhZ2VcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcikge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gVXNlclN2Yy5nZXRVc2VyXG4gICAgICAgIH0pXG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKiBVc2VkIGZvciBsb2dpbiBwYWdlXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVzZXIpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvNi8xNS5cbiAqIGNyZWF0ZSB0aGUgUG9zdHNDdHJsIG1vZHVsZSBhbmQgZGVwZW5kZW5jeSBpbmplY3QgJHNjb3BlLCB0aGUgc2NvcGUgdGllcy9nbHVlcyB0aGUgY29udHJvbGxlciB0byB0aGUgdmlld1xuICogaW50ZWdyYXRlIHRvIHRoZSBSRVNUIEFQSSB0byBwb3N0IGJhY2sgdG8gTW9uZ29EQi4gIE9ubHkgdGhlIHN1Y2Nlc3MgZnVuY3Rpb24gaXMgcG9zdGVkIGFuZCBpdCBudWxscyB0aGUgdmFsdWUgZm9yIHRoZSBuZXh0IHRpbWVcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKFwiUG9zdHNDdHJsXCIsZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMpIHtcbiAgICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnQWRkIFBvc3QgQnV0dG9uJyxcbiAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuICAgICAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHNcbiAgICAgICAgfSlcbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcbiAgICB9XG59KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvOS8xNS5cbiAqIFVzZWQgZm9yIHJlZ2lzdGVyIHBhZ2VcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICAgICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcil7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi85LzE1LlxuICogUm91dGluZyBmaWxlIHRoYXQgbWFwcyB0aGUgY29udHJvbGxlcnMgYW5kIGh0bWwgZmlsZXNcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAud2hlbignLycsIHtjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJ30pXG4gICAgICAgICAgICAud2hlbignL3JlZ2lzdGVyJywge2NvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnfSlcbiAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7Y29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCd9KVxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi85LzE1LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG4gICAgdmFyIHN2YyA9IHRoaXNcbiAgICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAvL3VzZWQgdG8gcmVnaXN0ZXIgbmV3IHVzZXJzIGFuZCBhdXRvbWF0aWNhbGx5IGxvZ3MgdGhlbSBpblxuICAgIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICB9KVxuICAgIH1cbn0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9