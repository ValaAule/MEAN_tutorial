angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(e,o){n.login(e,o).then(function(n){t.$emit("login",n)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"Add Post Button",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,n){t.register=function(e,o){n.register(e,o).then(function(n){t.$emit("login",n)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},n.login=function(e,o){return t.post("/api/sessions",{username:e,password:o}).then(function(e){return n.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,n.getUser()})},n.register=function(e,o){return t.post("/api/users",{username:e,password:o}).then(function(){return n.login(e,o)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsIiRlbWl0IiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInJlc3BvbnNlIiwiZGF0YSIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFHQUEsUUFBUUMsT0FBTyxPQUNYLFlDQUpELFFBQVFDLE9BQU8sT0FDZEMsV0FBVyxtQkFBQSxTQUFtQixTQUFTQyxHQUNoQ0EsRUFBT0MsSUFBSSxRQUFTLFNBQVNDLEVBQUdDLEdBQzVCSCxFQUFPSSxZQUFjRCxPQ0ZqQ04sUUFBUUMsT0FBTyxPQUNkQyxXQUFXLGFBQUEsU0FBQSxVQUFhLFNBQVVDLEVBQVFLLEdBQ25DTCxFQUFPTSxNQUFRLFNBQVVDLEVBQVVDLEdBQy9CSCxFQUFRQyxNQUFNQyxFQUFVQyxHQUNmQyxLQUFLLFNBQVVOLEdBQ2hCSCxFQUFPVSxNQUFNLFFBQVNQLFNDSjFDTixRQUFRQyxPQUFPLE9BQ2RDLFdBQVcsYUFBQSxTQUFBLFdBQVksU0FBVUMsRUFBUVcsR0FDdENYLEVBQU9ZLFFBQVUsV0FDVFosRUFBT2EsVUFDUEYsRUFBU0csUUFDTFAsU0FBVSxrQkFDVlEsS0FBTWYsRUFBT2EsV0FDZEcsUUFBUSxTQUFVQyxHQUNqQmpCLEVBQU9rQixNQUFNQyxRQUFRRixHQUNyQmpCLEVBQU9hLFNBQVcsUUFLOUJGLEVBQVNTLFFBQ0pKLFFBQVEsU0FBVUUsR0FDZmxCLEVBQU9rQixNQUFRQSxPQ3RCM0JyQixRQUFRQyxPQUFPLE9BQ2R1QixRQUFRLFlBQUEsUUFBWSxTQUFVQyxHQUMzQkMsS0FBS0gsTUFBUSxXQUNULE1BQU9FLEdBQU1FLElBQUksZUFFckJELEtBQUtULE9BQVMsU0FBVUcsR0FDcEIsTUFBT0ssR0FBTUwsS0FBSyxhQUFjQSxPQ0R4Q3BCLFFBQVFDLE9BQU8sT0FDZEMsV0FBVyxnQkFBQSxTQUFBLFVBQWdCLFNBQVVDLEVBQVFLLEdBQ3RDTCxFQUFPeUIsU0FBVyxTQUFVbEIsRUFBVUMsR0FDbENILEVBQVFvQixTQUFTbEIsRUFBVUMsR0FDbEJDLEtBQUssU0FBVU4sR0FDaEJILEVBQU9VLE1BQU0sUUFBU1AsU0NMMUNOLFFBQVFDLE9BQU8sT0FDZDRCLFFBQUEsaUJBQU8sU0FBVUMsR0FDVkEsRUFDS0MsS0FBSyxLQUFNN0IsV0FBWSxZQUFhOEIsWUFBYSxlQUNqREQsS0FBSyxhQUFjN0IsV0FBWSxlQUFnQjhCLFlBQWEsa0JBQzVERCxLQUFLLFVBQVc3QixXQUFZLFlBQWE4QixZQUFhLGtCQ05uRWhDLFFBQVFDLE9BQU8sT0FDZHVCLFFBQVEsV0FBQSxRQUFXLFNBQVNDLEdBQ3pCLEdBQUlRLEdBQU1QLElBQ1ZPLEdBQUlDLFFBQVUsV0FDVixNQUFPVCxHQUFNRSxJQUFJLGNBQ2hCZixLQUFLLFNBQVV1QixHQUNaLE1BQU9BLEdBQVNDLFFBSXhCSCxFQUFJeEIsTUFBTSxTQUFTQyxFQUFVQyxHQUN6QixNQUFPYyxHQUFNTCxLQUFLLGlCQUNkVixTQUFVQSxFQUFVQyxTQUFVQSxJQUMvQkMsS0FBSyxTQUFVdUIsR0FHZCxNQUZBRixHQUFJSSxNQUFRRixFQUFTQyxLQUNyQlgsRUFBTWEsU0FBU0MsUUFBUUMsT0FBTyxVQUFZTCxFQUFTQyxLQUM1Q0gsRUFBSUMsYUFLbkJELEVBQUlMLFNBQVcsU0FBVWxCLEVBQVVDLEdBQy9CLE1BQU9jLEdBQU1MLEtBQUssY0FDZFYsU0FBVUEsRUFBVUMsU0FBVUEsSUFDL0JDLEtBQUssV0FDSixNQUFPcUIsR0FBSXhCLE1BQU1DLEVBQVVDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvNy8xNS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcsW1xuICAgICduZ1JvdXRlJ1xuXSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzEyLzE1LlxuICogVXNlZCBmb3IgbG9naW4gcGFnZVxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKSB7XG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgICAgIH0pXG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKiBVc2VkIGZvciBsb2dpbiBwYWdlXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVzZXIpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvNi8xNS5cbiAqIGNyZWF0ZSB0aGUgUG9zdHNDdHJsIG1vZHVsZSBhbmQgZGVwZW5kZW5jeSBpbmplY3QgJHNjb3BlLCB0aGUgc2NvcGUgdGllcy9nbHVlcyB0aGUgY29udHJvbGxlciB0byB0aGUgdmlld1xuICogaW50ZWdyYXRlIHRvIHRoZSBSRVNUIEFQSSB0byBwb3N0IGJhY2sgdG8gTW9uZ29EQi4gIE9ubHkgdGhlIHN1Y2Nlc3MgZnVuY3Rpb24gaXMgcG9zdGVkIGFuZCBpdCBudWxscyB0aGUgdmFsdWUgZm9yIHRoZSBuZXh0IHRpbWVcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKFwiUG9zdHNDdHJsXCIsZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMpIHtcbiAgICAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnQWRkIFBvc3QgQnV0dG9uJyxcbiAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuICAgICAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHNcbiAgICAgICAgfSlcbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcbiAgICB9XG59KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvOS8xNS5cbiAqIFVzZWQgZm9yIHJlZ2lzdGVyIHBhZ2VcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICAgICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcil7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi85LzE1LlxuICogUm91dGluZyBmaWxlIHRoYXQgbWFwcyB0aGUgY29udHJvbGxlcnMgYW5kIGh0bWwgZmlsZXNcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAud2hlbignLycsIHtjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJ30pXG4gICAgICAgICAgICAud2hlbignL3JlZ2lzdGVyJywge2NvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnfSlcbiAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7Y29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCd9KVxuICAgIH0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi85LzE1LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG4gICAgdmFyIHN2YyA9IHRoaXNcbiAgICBzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBzdmMudG9rZW4gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKVxuICAgICAgICB9KVxuICAgIH1cblxuIC8vdXNlZCB0byByZWdpc3RlciBuZXcgdXNlcnMgYW5kIGF1dG9tYXRpY2FsbHkgbG9ncyB0aGVtIGluXG4gICAgc3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgIH0pXG4gICAgfVxufSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=