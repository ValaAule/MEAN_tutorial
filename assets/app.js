angular.module("app",["ngRoute"]),console.log("module.js: access to module successful"),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(s,e){o.currentUser=e,console.log("application.ctrl.js = login successful")})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,s){o.login=function(e,t){s.login(e,t).then(function(s){o.$emit("login",s),console.log("login.ctrl.js: login successful")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,s){o.addPost=function(){o.postBody&&s.create({username:"Add Post Button",body:o.postBody}).success(function(){console.log("posts.ctrl.js: create post successful")})},o.$on("ws:new_post",function(s,e){o.$apply(function(){o.posts.unshift(e),console.log("posts.ctrl.js: websocket new post successful")})}),s.fetch().success(function(s){o.posts=s,console.log("posts.ctrl.js: fetch post successful")})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return console.log("posts.svc.js: fetch post successful"),o.get("/api/posts")},this.create=function(s){return console.log("posts.svc.js: create post successful"),o.post("/api/posts",s)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,s){o.register=function(e,t){s.register(e,t).then(function(s){o.$emit("login",s),console.log("register.ctrl.js: registration succesful")})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}),console.log("routes.js: routing succesful")}]),angular.module("app").service("UserSvc",["$http",function(o){var s=this;s.getUser=function(){return o.get("/api/users").then(function(o){return console.log("user.svc.js: get user successful"),o.data})},s.login=function(e,t){return o.post("/api/sessions",{username:e,password:t}).then(function(e){return s.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,console.log("user.svc.js: login successful"),s.getUser()})},s.register=function(e,t){return console.log("user.svc.js: user registration successful"),o.post("/api/users",{username:e,password:t}).then(function(){return s.login(e,t)})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,s){!function e(){var t="ws://localhost:3000",n=new WebSocket(t);n.onopen=function(){console.log("ng/websockets.js: websocket connected")},n.onclose=function(){console.log("Websocket closed. Reconnecting..."),s(e,1e4)},n.onmessage=function(s){console.log(s);var e=JSON.parse(s.data);o.$broadcast("ws:"+e.topic,e.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyIsIndlYnNvY2tldHMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnNvbGUiLCJsb2ciLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwiJGVtaXQiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsIiRhcHBseSIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsInJlZ2lzdGVyIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwicmVzcG9uc2UiLCJkYXRhIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJydW4iLCIkcm9vdFNjb3BlIiwiJHRpbWVvdXQiLCJjb25uZWN0IiwidXJsIiwiY29ubmVjdGlvbiIsIldlYlNvY2tldCIsIm9ub3BlbiIsIm9uY2xvc2UiLCJvbm1lc3NhZ2UiLCJlIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIiRicm9hZGNhc3QiLCJ0b3BpYyJdLCJtYXBwaW5ncyI6IkFBR0FBLFFBQVFDLE9BQU8sT0FDWCxZQUdKQyxRQUFRQyxJQUFJLDBDQ0haSCxRQUFRQyxPQUFPLE9BQ2RHLFdBQVcsbUJBQUEsU0FBbUIsU0FBU0MsR0FDaENBLEVBQU9DLElBQUksUUFBUyxTQUFTQyxFQUFHQyxHQUM1QkgsRUFBT0ksWUFBY0QsRUFDckJOLFFBQVFDLElB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VUMsS0FBS0MsTUFBTUgsRUFBRWYsS0FDM0JNLEdBQVdhLFdBQVcsTUFBUUgsRUFBUUksTUFBT0osRUFBUWhCIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvNy8xNS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcsW1xuICAgICduZ1JvdXRlJ1xuXSlcblxuY29uc29sZS5sb2coJ21vZHVsZS5qczogYWNjZXNzIHRvIG1vZHVsZSBzdWNjZXNzZnVsJykiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzEyLzE1LlxuICogVXNlZCBmb3IgbG9naW4gcGFnZVxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKSB7XG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnYXBwbGljYXRpb24uY3RybC5qcyA9IGxvZ2luIHN1Y2Nlc3NmdWwnIClcbiAgICAgICAgfSlcbiAgICB9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvOS8xNS5cbiAqIFVzZWQgZm9yIGxvZ2luIHBhZ2VcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcil7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbG9naW4uY3RybC5qczogbG9naW4gc3VjY2Vzc2Z1bCcpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzYvMTUuXG4gKiBjcmVhdGUgdGhlIFBvc3RzQ3RybCBtb2R1bGUgYW5kIGRlcGVuZGVuY3kgaW5qZWN0ICRzY29wZSwgdGhlIHNjb3BlIHRpZXMvZ2x1ZXMgdGhlIGNvbnRyb2xsZXIgdG8gdGhlIHZpZXdcbiAqIGludGVncmF0ZSB0byB0aGUgUkVTVCBBUEkgdG8gcG9zdCBiYWNrIHRvIE1vbmdvREIuICBPbmx5IHRoZSBzdWNjZXNzIGZ1bmN0aW9uIGlzIHBvc3RlZCBhbmQgaXQgbnVsbHMgdGhlIHZhbHVlIGZvciB0aGUgbmV4dCB0aW1lXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcihcIlBvc3RzQ3RybFwiLGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU3ZjKSB7XG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xuICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ0FkZCBQb3N0IEJ1dHRvbicsXG4gICAgICAgICAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgICAgICAgLy8kc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLnBvc3RCb2R5ID0gbnVsbFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwb3N0cy5jdHJsLmpzOiBjcmVhdGUgcG9zdCBzdWNjZXNzZnVsJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbi8vIEkgZG9uJ3Qgc2VlbSB0byBiZSBhYmxlIHRvIGNhbGwgdGhpcyBjb2RlIHN1Y2Nlc3NmdWxseVxuJHNjb3BlLiRvbignd3M6bmV3X3Bvc3QnLCBmdW5jdGlvbiAoXywgcG9zdCkge1xuICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICBjb25zb2xlLmxvZygncG9zdHMuY3RybC5qczogd2Vic29ja2V0IG5ldyBwb3N0IHN1Y2Nlc3NmdWwnKVxuICAgICAgICB9KVxuICAgIH0pXG5cbiAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuICAgICAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHNcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwb3N0cy5jdHJsLmpzOiBmZXRjaCBwb3N0IHN1Y2Nlc3NmdWwnKVxuICAgICAgICB9KVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Bvc3RzLnN2Yy5qczogZmV0Y2ggcG9zdCBzdWNjZXNzZnVsJylcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXG4gICAgfVxuICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Bvc3RzLnN2Yy5qczogY3JlYXRlIHBvc3Qgc3VjY2Vzc2Z1bCcpXG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcbiAgICB9XG59KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvOS8xNS5cbiAqIFVzZWQgZm9yIHJlZ2lzdGVyIHBhZ2VcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICAgICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcil7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCB1c2VyKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVnaXN0ZXIuY3RybC5qczogcmVnaXN0cmF0aW9uIHN1Y2Nlc2Z1bCcpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKiBSb3V0aW5nIGZpbGUgdGhhdCBtYXBzIHRoZSBjb250cm9sbGVycyBhbmQgaHRtbCBmaWxlc1xuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKCcvJywge2NvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnfSlcbiAgICAgICAgICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCd9KVxuICAgICAgICAgICAgLndoZW4oJy9sb2dpbicsIHtjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJ30pXG4gICAgICAgICAgICBjb25zb2xlLmxvZygncm91dGVzLmpzOiByb3V0aW5nIHN1Y2Nlc2Z1bCcpXG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwKXtcbiAgICB2YXIgc3ZjID0gdGhpc1xuICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3VzZXIuc3ZjLmpzOiBnZXQgdXNlciBzdWNjZXNzZnVsJylcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBzdmMudG9rZW4gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICBjb25zb2xlLmxvZygndXNlci5zdmMuanM6IGxvZ2luIHN1Y2Nlc3NmdWwnKVxuICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAvL3VzZWQgdG8gcmVnaXN0ZXIgbmV3IHVzZXJzIGFuZCBhdXRvbWF0aWNhbGx5IGxvZ3MgdGhlbSBpblxuICAgIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3VzZXIuc3ZjLmpzOiB1c2VyIHJlZ2lzdHJhdGlvbiBzdWNjZXNzZnVsJylcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICB9KVxuICAgIH1cbn0pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IEF1bGUgb24gMi8xOS8xNS5cbiAqIEFuZ3VsYXIgcnVuIGNvbXBvbmVudCBleGVjdXRlZCBkdXJpbmcgdGhlIGluaXRpYWxpemF0aW9uIHBoYXNlXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLnJ1bihmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcbiAgICAgICAgKGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gJ3dzOi8vbG9jYWxob3N0OjMwMDAnXG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQodXJsKVxuXG4gICAgICAgICAgICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCduZy93ZWJzb2NrZXRzLmpzOiB3ZWJzb2NrZXQgY29ubmVjdGVkJylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnV2Vic29ja2V0IGNsb3NlZC4gUmVjb25uZWN0aW5nLi4uJylcbiAgICAgICAgICAgICAgICAkdGltZW91dChjb25uZWN0LCAxMCoxMDAwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKVxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkgKClcbiAgICB9KSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==