angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,o){t.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(o,e){n.login(o,e).then(function(n){t.$emit("login",n)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"Add Post Button",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},n.login=function(o,e){return t.post("/api/sessions",{username:o,password:e}).then(function(o){return n.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,n.getUser()})},n.register=function(o,e){return t.post("/api/users",{username:o,password:e}).then(function(){return n.login(o,e)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwiJGVtaXQiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInJlc3BvbnNlIiwiZGF0YSIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUdBQSxRQUFRQyxPQUFPLE9BQ1gsWUNESkQsUUFBUUMsT0FBTyxPQUNkQyxXQUFXLG1CQUFBLFNBQW1CLFNBQVNDLEdBQ2hDQSxFQUFPQyxJQUFJLFFBQVMsU0FBU0MsRUFBR0MsR0FDNUJILEVBQU9JLFlBQWNELE9DRmpDTixRQUFRQyxPQUFPLE9BQ2RDLFdBQVcsYUFBQSxTQUFBLFVBQWEsU0FBVUMsRUFBUUssR0FDbkNMLEVBQU9NLE1BQVEsU0FBVUMsRUFBVUMsR0FDL0JILEVBQVFDLE1BQU1DLEVBQVVDLEdBQ2ZDLEtBQUssU0FBVU4sR0FDaEJILEVBQU9VLE1BQU0sUUFBU1AsU0NOMUNOLFFBQVFDLE9BQU8sT0FJZEMsV0FBVyxhQUFBLFNBQUEsV0FBWSxTQUFVQyxFQUFRVyxHQUN0Q1gsRUFBT1ksUUFBVSxXQUNUWixFQUFPYSxVQUNQRixFQUFTRyxRQUNMUCxTQUFVLGtCQUNWUSxLQUFNZixFQUFPYSxXQUNkRyxRQUFRLFNBQVVDLEdBQ2pCakIsRUFBT2tCLE1BQU1DLFFBQVFGLEdBQ3JCakIsRUFBT2EsU0FBVyxRQUs5QkYsRUFBU1MsUUFDSkosUUFBUSxTQUFVRSxHQUNmbEIsRUFBT2tCLE1BQVFBLE9DdEIzQnJCLFFBQVFDLE9BQU8sT0FDZHVCLFFBQVEsWUFBQSxRQUFZLFNBQVVDLEdBQzNCQyxLQUFLSCxNQUFRLFdBQ1QsTUFBT0UsR0FBTUUsSUFBSSxlQUVyQkQsS0FBS1QsT0FBUyxTQUFVRyxHQUNwQixNQUFPSyxHQUFNTCxLQUFLLGFBQWNBLE9DRHhDcEIsUUFBUUMsT0FBTyxPQUNkMkIsUUFBQSxpQkFBTyxTQUFVQyxHQUNWQSxFQUNLQyxLQUFLLEtBQU01QixXQUFZLFlBQWE2QixZQUFhLGVBQ2pERCxLQUFLLGFBQWM1QixXQUFZLGVBQWdCNkIsWUFBYSxrQkFDNURELEtBQUssVUFBVzVCLFdBQVksWUFBYTZCLFlBQWEsa0JDTm5FL0IsUUFBUUMsT0FBTyxPQUNkdUIsUUFBUSxXQUFBLFFBQVcsU0FBU0MsR0FDckIsR0FBSU8sR0FBTU4sSUFDVk0sR0FBSUMsUUFBVSxXQUNsQixNQUFPUixHQUFNRSxJQUFJLGNBQ2hCZixLQUFLLFNBQVVzQixHQUNkLE1BQU9BLEdBQVNDLFFBR2RILEVBQUl2QixNQUFNLFNBQVNDLEVBQVVDLEdBQ3pCLE1BQU9jLEdBQU1MLEtBQUssaUJBQ2RWLFNBQVVBLEVBQVVDLFNBQVVBLElBQ3ZDQyxLQUFLLFNBQVVzQixHQUdOLE1BRlZGLEdBQUlJLE1BQVFGLEVBQVNDLEtBQ3JCVixFQUFNWSxTQUFTQyxRQUFRQyxPQUFPLFVBQVlMLEVBQVNDLEtBQ2xDSCxFQUFJQyxhQUt6QkQsRUFBSVEsU0FBVyxTQUFVOUIsRUFBVUMsR0FDakMsTUFBT2MsR0FBTUwsS0FBSyxjQUNoQlYsU0FBVUEsRUFBVUMsU0FBVUEsSUFDN0JDLEtBQUssV0FDTixNQUFPb0IsR0FBSXZCLE1BQU1DLEVBQVVDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvNy8xNS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcsW1xuICAgICduZ1JvdXRlJ1xuXSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzEyLzE1LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKSB7XG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgICAgIH0pXG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVzZXIpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBBdWxlIG9uIDIvNi8xNS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cbi8vY3JlYXRlIHRoZSBQb3N0c0N0cmwgbW9kdWxlIGFuZCBkZXBlbmRlbmN5IGluamVjdCAkc2NvcGUsIHRoZSBzY29wZSB0aWVzL2dsdWVzIHRoZSBjb250cm9sbGVyIHRvIHRoZSB2aWV3XG4vL2ludGVncmF0ZSB0byB0aGUgUkVTVCBBUEkgdG8gcG9zdCBiYWNrIHRvIE1vbmdvREIuICBPbmx5IHRoZSBzdWNjZXNzIGZ1bmN0aW9uIGlzIHBvc3RlZCBhbmQgaXQgbnVsbHMgdGhlIHZhbHVlIGZvciB0aGUgbmV4dCB0aW1lXG4uY29udHJvbGxlcihcIlBvc3RzQ3RybFwiLGZ1bmN0aW9uICgkc2NvcGUsIFBvc3RzU3ZjKSB7XG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xuICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ0FkZCBQb3N0IEJ1dHRvbicsXG4gICAgICAgICAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdClcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgUG9zdHNTdmMuZmV0Y2goKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzXG4gICAgICAgIH0pXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJylcbiAgICB9XG4gICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAocG9zdCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXG4gICAgfVxufSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKCcvJywge2NvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnfSlcbiAgICAgICAgICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCd9KVxuICAgICAgICAgICAgLndoZW4oJy9sb2dpbicsIHtjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJ30pXG4gICAgfSkiLCIvKipcbiAqIENyZWF0ZWQgYnkgQXVsZSBvbiAyLzkvMTUuXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwKXtcbiAgICAgICAgdmFyIHN2YyA9IHRoaXNcbiAgICAgICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgc3ZjLmxvZ2luPWZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgc3ZjLnRva2VuID0gcmVzcG9uc2UuZGF0YVxuICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgfSlcbiAgfVxuXG4gICAgICAgIC8vbm90IGluIHRoZSBjb2RlIGluIHRoZSBib29rLCBidXQgb2ZmIGdpdGh1YiB3aHk/Pz8gIHdoYXQgZG9lcyBpdCBkb1xuICBzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7XG4gICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgIH0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9